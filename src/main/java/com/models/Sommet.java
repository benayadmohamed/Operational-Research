/**
 * This file was generated by the Jeddict
 */

package com.models;

import java.io.IOException;
import java.io.Serializable;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.databind.ObjectMapper;

/**
 * @author simo-
 */

@Entity
public class Sommet implements Serializable {

	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Long id;

	@Basic
	private String nom;
	@Basic
	private String image;
	@Basic
	private Double longueurPcc;

	@Basic
	private Long prédécesseurPcc;
	@JsonIgnore 
	@ManyToOne(targetEntity = Graphe.class)
	private Graphe graphe;
	@JsonIgnore 
	@OneToMany(fetch = FetchType.EAGER ,  targetEntity = Arret.class, mappedBy = "depart", cascade = CascadeType.ALL)
	private List<Arret> successeurs;
	@JsonIgnore 
	@OneToMany(fetch = FetchType.EAGER,  targetEntity = Arret.class, mappedBy = "arrive", cascade = CascadeType.ALL)
	private List<Arret> prédécesseurs;

	public Sommet(Long id, String nom, Double longueurPcc, Long prédécesseurPcc, Graphe graphe, List<Arret> successeurs,
			List<Arret> prédécesseurs) {
		super();
		this.id = id;
		this.nom = nom;
		this.longueurPcc = longueurPcc;
		this.prédécesseurPcc = prédécesseurPcc;
		this.graphe = graphe;
		this.successeurs = successeurs;
		this.prédécesseurs = prédécesseurs;
	}

	public Sommet() {
		// TODO Auto-generated constructor stub
	}

	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public String getNom() {
		return this.nom;
	}

	public void setNom(String nom) {
		this.nom = nom;
	}

	public Graphe getGraphe() {
		return this.graphe;
	}

	public void setGraphe(Graphe graphe) {
		this.graphe = graphe;
	}

	public List<Arret> getSuccesseurs() {
		HashSet<Arret> arrets2 = new HashSet<>(this.successeurs);

		return new ArrayList<>(arrets2);
	}

	public void setSuccesseurs(Arret successeur) {
		this.successeurs.add(successeur);
	}

	public List<Arret> getPrédécesseurs() {

		HashSet<Arret> arrets2 = new HashSet<>(this.prédécesseurs);

		return new ArrayList<>(arrets2);
	}

	public void setPrédécesseurs(Arret prédécesseur) {
		this.prédécesseurs.add(prédécesseur);
	}

	public Double getLongueurPcc() {
		return longueurPcc;
	}

	public void setLongueurPcc(Double longueurPcc) {
		this.longueurPcc = longueurPcc;
	}

	public Long getPrédécesseurPcc() {
		return prédécesseurPcc;
	}

	public void setPrédécesseurPcc(Long prédécesseurPcc) {
		this.prédécesseurPcc = prédécesseurPcc;
	}

	public String getImage() {
		return image;
	}

	public void setImage(String image) {
		this.image = image;
	}

	@Override
	public String toString() {
		// TODO Auto-generated method stub

		ObjectMapper mapper = new ObjectMapper();
		StringWriter stringWriter = new StringWriter();
		try {
			mapper.writeValue(stringWriter, this);
		} catch (IOException e) {
			// TODO Auto-generated catch block

		}
		return stringWriter.toString();
	}
}
